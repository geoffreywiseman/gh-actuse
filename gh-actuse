#! /usr/bin/env bash
declare repo_total_ms
declare org_total_ms
declare org_total_repos
declare org_total_workflows

print_org_usage() {
    local org_name
    local enabled_repos
    org_name=$1

    printf "\\nOrganization: %s\\n" "$org_name"
    enabled_repos=$(gh api "/orgs/$org_name/actions/permissions" --jq ".enabled_repositories")
    case "$enabled_repos" in
        all)
        echo "- GitHub Actions enabled on All Repos"
        print_org_repos "$org_name" "All Repos" "repos"
        ;;
        selected)
        echo "- GitHub Actions enabled on Selected Repos"
        print_org_repos "$org_name" "Selected Repos" "actions/permissions/repositories"
        ;;
        none)
        echo "- GitHub Actions is not enabled on any repositories"
        ;;
        *)
        echo "- GitHub Actions is enabled on $enabled_repos?"
    esac
}

print_org_repos() {
    local org_name=$1
    local description=$2
    local path=$3

    org_total_ms=0
    org_total_workflows=0
    org_total_repos=0

    local page=1
    local error=0
    while [ $error -eq 0 ]
    do
        print_org_repos_page "$org_name" "$path" $page
        error=$?
        ((page++))
    done

    printf "\\n"
    printf "Finished scanning %d workflows in %d repos\\n" "$org_total_worflows" $org_total_repos
    print_human_usage "$description Total" "$org_total_ms"
}

print_org_repos_page() {
    local org_name=$1
    local path=$2
    local page=$3

    repos=$(gh api "/orgs/$org_name/$path?page=$page" --jq '.[].name')
    if [ -z "$repos" ]
    then
        return 1
    else
        for repo in $repos
        do
            print_repo_usage "$org_name/$repo"
        done
        return 0
    fi
}

print_repo_usage() {
    local repo_name

    if ! repo_name=$(gh repo view "$1" --json name,owner --jq '( .owner.login + "/" + .name )' 2> /dev/null); then
        if [[ "$1" == "" ]]; then
            printf "\\nCurrent directory doesn't seem to be a repo that 'gh' recognizes.\\n"
        else
            printf "\\nCan't find repo: '%s' (%s)\\n" "$1" "$repo_name"
        fi
        
        exit 1
    fi

    printf "\\nRepo %s:\\n" "$repo_name"
    ((org_total_repos++))
    repo_total_ms=0

    while IFS="|" read -r wfid wfname; do
        print_wf_usage "$repo_name" "$wfid" "$wfname"
    done < <(gh api "/repos/${repo_name}/actions/workflows" --jq '.workflows[] | "\(.id)|\(.name)"') 
    
    print_human_usage "- Repo Total" $repo_total_ms
}

print_wf_usage() {
    local wf_id
    local wf_name
    local ms_lines
    local wf_total

    repo=$1
    wf_id=$2
    wf_name=$3
    wf_total=0

    ms_lines=$(gh api "/repos/${repo}/actions/workflows/$wf_id/timing" --jq ".billable[].total_ms")
    for ms_line in $ms_lines
    do
        wf_total=$(( wf_total + ms_line ))
        repo_total_ms=$(( repo_total_ms + ms_line ))
        org_total_ms=$(( org_total_ms + ms_line ))
        ((org_total_worflows++))
    done

    print_human_usage "- Workflow '$wf_name'" $wf_total
}

print_human_usage() {
    local prefix=$1
    local usage=$2

    if (( usage < 1000 )); then
        printf "%s Usage: %sms\\n" "$prefix" "$usage"
    elif (( usage < 60000 )); then
        printf "%s Usage: %ss\\n" "$prefix" $((usage / 1000))
    elif (( usage < 3600000 )); then
        printf "%s Usage: %sm\\n" "$prefix" $((usage / 60000))
    else 
        printf "%s Usage: %sh (%sm)\\n" "$prefix" $((usage / 3600000)) $((usage / 60000))
    fi
}

print_usage() {
    local target
    target=$1
    
    if [[ "$target" == */* ]]; then
        print_repo_usage "$target"
    else
        print_org_usage "$target"
    fi
}

parse_and_run() {
    printf "GitHub Actions Usage\\n"
    if (( "$#" == 0 )); then
        print_repo_usage
    else
        while (( "$#" )); do
            print_usage "$1"
            shift
        done
    fi
}

parse_and_run "$@"
